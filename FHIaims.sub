#!/bin/bash
#SBATCH --nodes=1
#SBATCH --tasks-per-node=64
#SBATCH --mem=0
#SBATCH --time=1-00:00:00
#SBATCH --job-name=outfile
#SBATCH --account=rrg-ejohnson

module purge
module load StdEnv/2020
module load intel/2020.1.217 intelmpi/2019.7.217 imkl/2020.1.217 libxc/5.1.3

export OMP_NUM_THREADS=1
export MKL_NUM_THREADS=1
export MKL_DYNAMIC=FALSE
ulimit -s unlimited

### USER INPUT ###
dir="directory"
output="outfile"

### Please select the following options for your calculation:
## You will probably want to alter these options:
xc="pbe"
opt=true

## You may still want to change these but these are safe options.
basis="lightdense"
xdm=true
relativistic=true
spin=false
charge=0
mnkhrstpck=65

# END USER INPUT SECTION #
# XC
echo "xc $xc" >> control.in

# SPIN
if $spin
then
  echo "spin collinear" >> control.in
else
  echo "spin none" >> control.in
fi

# CHARGE
echo "charge $charge" >> control.in

# OUTPUT LEVEL
echo "output_level MD_light" >> control.in

# RELATIVISTIC
if $relativistic
  then
  echo "relativistic atomic_zora scalar" >> control.in
fi

# GEOMETRY OPTIMZATION
if $opt
then
  echo "relax_geometry bfgs 0.01
sc_accuracy_forces 1e-4
sc_accuracy_etot 1e-6" >> control.in
fi

# K GRID
echo "crystal geometry.in
kpoints $mnkhrstpck" > ding
critic2 < ding > dong
kgrd=$(grep "+ Rk =" dong | awk '{print $8,$9,$10}')
#rm ding
#rm dong
echo "kgrid $kgrd" >> control.in

# Kyle R Bryenton 2024-02-14
# BasisConstructor.sh

# This shell script performs the following tasks:
#   1. It searches through all subdirectories of any depth from the WD
#   2. It then creates a list of all elements found in the geometry.in files
#   3. It filters out only the unique elements, and sorts them in the order of the periodic table
#   4. It prints the unique and sorted list of atoms to the terminal
#   5. If directories containing FHIaims basis functions are provided in the header, it will create a .basis file that can be appended to your control.in

# ~~~~~~~~~~ HEADER and INPUT ~~~~~~~~~~~

basis_directory="/home/kyle/Basis_and_Pseudos/FHIaims_Basis_Functions/"
Li_Flag=true  #Flag to create a basis file from a "light/" subdirectory
LS_Flag=false #Flag to create a basis file from a "light_spd/" subdirectory
LD_Flag=true  #Flag to create a basis file from a "lightdense/" subdirectory
Im_Flag=true  #Flag to create a basis file from a "intermediate/" subdirectory
Ti_Flag=true  #Flag to create a basis file from a "tight/" subdirectory
RT_Flag=false #Flag to create a basis file from a "really_tight/" subdirectory

# If an optional argument is provided, it uses that name.
# Otherwise, it uses the PWD's basename.
if [ $# -gt 0 ]; then
    dataset_name="$1"
else
    dataset_name=$(basename "$(pwd)")
fi

# ~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~

#  Input: 
#    - A space-delimited list of elements with appropriate capitalization, in any order
# Ouptut:
#    - The same list of elements, but sorted in periodic-table order
PT_sort() {
    local unique_atom_list=("$@")
    local order=(
        "H"  "He" 
        "Li" "Be" "B"  "C"  "N"  "O"  "F"  "Ne"
        "Na" "Mg" "Al" "Si" "P"  "S"  "Cl" "Ar"
        "K"  "Ca" "Sc" "Ti" "V"  "Cr" "Mn" "Fe" "Co" "Ni" "Cu" "Zn" "Ga" "Ge" "As" "Se" "Br" "Kr"
        "Rb" "Sr" "Y"  "Zr" "Nb" "Mo" "Tc" "Ru" "Rh" "Pd" "Ag" "Cd" "In" "Sn" "Sb" "Te" "I"  "Xe"
        "Cs" "Ba" "La" "Ce" "Pr" "Nd" "Pm" "Sm" "Eu" "Gd" "Tb" "Dy" "Ho" "Er" "Tm" "Yb" "Lu" 
                       "Hf" "Ta" "W"  "Re" "Os" "Ir" "Pt" "Au" "Hg" "Tl" "Pb" "Bi" "Po" "At" "Rn"
        "Fr" "Ra" "Ac" "Th" "Pa" "U"  "Np" "Pu" "Am" "Cm" "Bk" "Cf" "Es" "Fm" "Md" "No" "Lr" 
                       "Rf" "Db" "Sg" "Bh" "Hs" "Mt" "Ds" "Rg" "Cn" "Nh" "Fl" "Mc" "Lv" "Ts" "Og"
    )
    
    local keyed_atom_list=()
    for element in "${unique_atom_list[@]}"; do
        # - Turns order[@] into a newline-separated list via printf
	# - Greps the current element, via `-n` it includes the line number followed by ":"
	# - Prints the first column (the line number)  via cut.
        # This gets the index of the element.
	local index=$(printf "%s\n" "${order[@]}" | grep -n "^$element$" | cut -d: -f1)
        keyed_atom_list+=("$index $element")
    done
    
    # - Turns keyed_atom_list[@] into a newline-separated list via printf
    # - Sorts based on the element's index that was inserted into the first column
    # - Prints out the second column via cut.
    local sorted_atom_list=($(printf "%s\n" "${keyed_atom_list[@]}" | sort -n | cut -d" " -f2-))
    
    echo "${sorted_atom_list[@]}"
}

#  Input: 
#    - Global: $basis_directory    Contains the basis_type ("light/" , "tight/", etc) subdirectories
#    - Global: $dataset_name       Provided in the program header
#    - Global: $sorted_atom_list   A space-delimited list of elements with appropriate capitalization
#    - Input Arg: $basis_type      The name of the basis folder within $basis_directory 
# Output:
#    - A file containing FHI-aims basis functions for the inputs provided above
Print_basis() {
    local basis_type="${1%/}"
    local basis_dir="${basis_directory%/}"
    local basis_path="${basis_dir}/${basis_type}"
    local output_name="${dataset_name}_${basis_type}.basis"
    
    # Checks if path exists
    if [ ! -d "$basis_path" ]; then
        echo "Error: Directory $basis_path not found."
        return 1
    fi

    # Remove existing basis if it already exists
    if [ -e "$output_name" ]; then
	echo "WARN: Deleting old instance of " $output_name >&2
	rm "${output_name}"
    fi

    # Printing basis files
    for element in "${sorted_atom_list[@]}"; do
        filename="*_${element}_*"
        cat "${basis_path}"/${filename} >> "${output_name}"
    done
}

# ~~~~~~~~~~ DO ACTUAL WORK ~~~~~~~~~~

# Loop through subdirectories and make an atom list
atom_list=()
for i in $(find . -name "geometry.in"); do 
    atoms=($(grep "^atom" $i | awk '{print $5}'))
    atom_list+=("${atoms[@]}")
done

# Get unique elements, then sort using PT_sort
unique_atom_list=($(printf "%s\n" "${atom_list[@]}" | sort -u))
sorted_atom_list=($(PT_sort "${unique_atom_list[@]}"))
echo "Atoms: " ${sorted_atom_list[@]}

# Print the .basis files
if [[ "$Li_Flag" == "true" ]] ; then Print_basis "light/" ; fi
if [[ "$LS_Flag" == "true" ]] ; then Print_basis "light_spd/" ; fi
if [[ "$LD_Flag" == "true" ]] ; then Print_basis "lightdense/" ; fi
if [[ "$Im_Flag" == "true" ]] ; then Print_basis "intermediate/" ; fi
if [[ "$Ti_Flag" == "true" ]] ; then Print_basis "tight/" ; fi
if [[ "$RT_Flag" == "true" ]] ; then Print_basis "really_tight/" ; fi

cd $dir
mpirun /home/arumson/projects/def-ejohnson/FHIaims/FHIaims-220915-clean/build/aims.220915.scalapack.mpi.x </dev/null > $output.out

if test -f "geometry.in.next_step"
then
        cp $output.out $output.out_backup
        mv geometry.in.next_step geometry.in
        mpirun /home/arumson/projects/def-ejohnson/FHIaims/FHIaims-220915-clean/build/aims.220915.scalapack.mpi.x </dev/null > $output.out
fi
